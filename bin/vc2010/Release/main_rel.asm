; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\OLD_J\Sicker shit fuer die Revision 2016\8k\src\main_rel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?shader_frag@@3PBDB				; shader_frag
PUBLIC	??_C@_0ECE@EBCAKNOF@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ ; `string'
PUBLIC	?shader_2_frag@@3PBDB				; shader_2_frag
PUBLIC	??_C@_0JM@JPJDOKEK@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ ; `string'
PUBLIC	?lpSoundBuffer@@3PAMA				; lpSoundBuffer
PUBLIC	?hWaveOut@@3PAUHWAVEOUT__@@A			; hWaveOut
PUBLIC	?WaveFMT@@3UtWAVEFORMATEX@@A			; WaveFMT
PUBLIC	?WaveHDR@@3Uwavehdr_tag@@A			; WaveHDR
PUBLIC	?MMTime@@3Ummtime_tag@@A			; MMTime
PUBLIC	?textureData@@3PAMA				; textureData
PUBLIC	?textureDataInitial@@3PAMA			; textureDataInitial
PUBLIC	?screenData@@3PAMA				; screenData
PUBLIC	?textData@@3PAMA				; textData
_BSS	SEGMENT
?lpSoundBuffer@@3PAMA DD 064c680H DUP (?)		; lpSoundBuffer
?hWaveOut@@3PAUHWAVEOUT__@@A DD 01H DUP (?)		; hWaveOut
?textureData@@3PAMA DD 0384000H DUP (?)			; textureData
?textureDataInitial@@3PAMA DD 0384008H DUP (?)		; textureDataInitial
?screenData@@3PAMA DD 0384008H DUP (?)			; screenData
?textData@@3PAMA DD 0384008H DUP (?)			; textData
_BSS	ENDS
CONST	SEGMENT
?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B DW 00H		; pfd
	DW	00H
	DD	021H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
wavehdr	SEGMENT
?WaveHDR@@3Uwavehdr_tag@@A DD FLAT:?lpSoundBuffer@@3PAMA ; WaveHDR
	DD	01931a00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?MMTime@@3Ummtime_tag@@A DD 02H				; MMTime
	DD	00H
	ORG $+4
wavehdr	ENDS
wavefmt	SEGMENT
?WaveFMT@@3UtWAVEFORMATEX@@A DW 03H			; WaveFMT
	DW	02H
	DD	0ac44H
	DD	056220H
	DW	08H
	DW	020H
	DW	00H
wavefmt	ENDS
;	COMDAT ??_C@_0JM@JPJDOKEK@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@
CONST	SEGMENT
??_C@_0JM@JPJDOKEK@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ DB '#ver'
	DB	'sion 420', 0aH, 'out vec4 f;in vec4 gl_Color;void main(){vec2'
	DB	' v=gl_PointCoord.xy-vec2(.5);float g=length(v);if(g>.5){disca'
	DB	'rd;}f=vec4(v.x,v.y,1.-length(v),1.);}', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ECE@EBCAKNOF@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@
CONST	SEGMENT
??_C@_0ECE@EBCAKNOF@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ DB '#ve'
	DB	'rsion 420', 0aH, 'out vec4 f;in vec4 gl_Color;layout(size4x32'
	DB	')uniform image2D imageTexture;uniform sampler2D imageSampler;'
	DB	'layout(binding=1)uniform sampler2D shadeMe;float i(vec3 v,flo'
	DB	'at i){v.x/=.5625;vec3 s=v;vec2 g=vec2(length(s.xz)-.8,s.y);fl'
	DB	'oat e=length(g)-.25;return e;}void main(){vec2 s=gl_FragCoord'
	DB	'.xy/vec2(1280.,720.);float g=gl_Color.y*3000.*10.,e=.002;vec4'
	DB	' v=texture(shadeMe,s.xy);vec2 d=vec2(e,0.);if(gl_FragCoord.y<'
	DB	'30){vec4 t=texture(imageSampler,s.xy);vec3 y=vec3(0.,-1.,0.);'
	DB	'vec4 l=t+vec4(normalize(y),0.)*e;vec3 z=l.xyz,n=vec3(i(z-d.xy'
	DB	'y,g)-i(z+d.xyy,g),i(z-d.yxy,g)-i(z+d.yxy,g),i(z-d.yyx,g)-i(z+'
	DB	'd.yyx,g));if(i(z,g)>0.)l.xyz+=normalize(n)*e*2.;l.xyz=mod(l.x'
	DB	'yz+vec3(.5),1.)-vec3(.5);imageStore(imageTexture,ivec2(gl_Fra'
	DB	'gCoord.xy),l);}float t[]={.000229,.005977,.060598,.241732,.38'
	DB	'2928,.241732,.060598,.005977,.000229},z=v.w;v=vec4(0);float l'
	DB	'=0.;if(z!=0){float y=0;for(int n=-4;n<=4;n++){for(int r=-4;r<'
	DB	'=4;r++)v+=texture(shadeMe,(gl_FragCoord.xy+vec2(n,r))/vec2(12'
	DB	'80.,720.))*t[n+4]*t[r+4],y+=t[n+4]*t[r+4];}v=v/y;l=clamp(z/30'
	DB	'.,0.,1.);}f=vec4(v.z/10.);}', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?shader_frag@@3PBDB DD FLAT:??_C@_0ECE@EBCAKNOF@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ ; shader_frag
?shader_2_frag@@3PBDB DD FLAT:??_C@_0JM@JPJDOKEK@?$CDversion?5420?6out?5vec4?5f?$DLin?5vec4?5@ ; shader_2_frag
_DATA	ENDS
PUBLIC	?entrypoint@@YGXXZ				; entrypoint
PUBLIC	??_C@_04NABONMNG@edit?$AA@			; `string'
PUBLIC	??_C@_0BA@FLKLHNKP@glCreateProgram?$AA@		; `string'
PUBLIC	??_C@_0P@HGHBNC@glCreateShader?$AA@		; `string'
PUBLIC	??_C@_0P@DFHCPFMO@glShaderSource?$AA@		; `string'
PUBLIC	??_C@_0BA@DGIEGONF@glCompileShader?$AA@		; `string'
PUBLIC	??_C@_0P@LDMLEABL@glAttachShader?$AA@		; `string'
PUBLIC	??_C@_0O@PIOEEBPO@glLinkProgram?$AA@		; `string'
PUBLIC	??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@		; `string'
PUBLIC	??_C@_0N@JAEIBBBF@glTexImage3D?$AA@		; `string'
PUBLIC	??_C@_0BG@CKIKMCEP@glBindImageTextureEXT?$AA@	; `string'
PUBLIC	??_C@_0BC@FAPEBGID@glGenFramebuffers?$AA@	; `string'
PUBLIC	??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@	; `string'
PUBLIC	??_C@_0BH@JCIFGDEF@glFramebufferTexture2D?$AA@	; `string'
PUBLIC	??_C@_0N@ICBDHBI@glUseProgram?$AA@		; `string'
PUBLIC	__real@3ab60b61
PUBLIC	__real@3acccccd
PUBLIC	__real@3b03126f
PUBLIC	__real@3b360b61
PUBLIC	__real@3f00624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@4076800000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__wglGetProcAddress@4:PROC
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__SwapBuffers@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__glBegin@4:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp__glBlendFunc@8:PROC
EXTRN	__imp__glClear@4:PROC
EXTRN	__imp__glColor4f@16:PROC
EXTRN	__imp__glColor4ui@16:PROC
EXTRN	__imp__glDepthFunc@4:PROC
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glGenTextures@8:PROC
EXTRN	__imp__glGetTexImage@20:PROC
EXTRN	__imp__glPointSize@4:PROC
EXTRN	__imp__glRects@16:PROC
EXTRN	__imp__glTexImage2D@36:PROC
EXTRN	__imp__glTexParameteri@12:PROC
EXTRN	__imp__glVertex3f@12:PROC
EXTRN	__4klang_render@4:PROC
EXTRN	__imp__waveOutOpen@24:PROC
EXTRN	__imp__waveOutPrepareHeader@12:PROC
EXTRN	__imp__waveOutWrite@12:PROC
EXTRN	__imp__waveOutGetPosition@12:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f00624dd2f1a9fc
CONST	SEGMENT
__real@3f00624dd2f1a9fc DQ 03f00624dd2f1a9fcr	; 3.125e-05
CONST	ENDS
;	COMDAT __real@3b360b61
CONST	SEGMENT
__real@3b360b61 DD 03b360b61r			; 0.00277778
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
CONST	ENDS
;	COMDAT __real@3acccccd
CONST	SEGMENT
__real@3acccccd DD 03acccccdr			; 0.0015625
CONST	ENDS
;	COMDAT __real@3ab60b61
CONST	SEGMENT
__real@3ab60b61 DD 03ab60b61r			; 0.00138889
CONST	ENDS
;	COMDAT ??_C@_0N@ICBDHBI@glUseProgram?$AA@
CONST	SEGMENT
??_C@_0N@ICBDHBI@glUseProgram?$AA@ DB 'glUseProgram', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JCIFGDEF@glFramebufferTexture2D?$AA@
CONST	SEGMENT
??_C@_0BH@JCIFGDEF@glFramebufferTexture2D?$AA@ DB 'glFramebufferTexture2D'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@
CONST	SEGMENT
??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@ DB 'glBindFramebuffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FAPEBGID@glGenFramebuffers?$AA@
CONST	SEGMENT
??_C@_0BC@FAPEBGID@glGenFramebuffers?$AA@ DB 'glGenFramebuffers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CKIKMCEP@glBindImageTextureEXT?$AA@
CONST	SEGMENT
??_C@_0BG@CKIKMCEP@glBindImageTextureEXT?$AA@ DB 'glBindImageTextureEXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JAEIBBBF@glTexImage3D?$AA@
CONST	SEGMENT
??_C@_0N@JAEIBBBF@glTexImage3D?$AA@ DB 'glTexImage3D', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@
CONST	SEGMENT
??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@ DB 'glActiveTexture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIOEEBPO@glLinkProgram?$AA@
CONST	SEGMENT
??_C@_0O@PIOEEBPO@glLinkProgram?$AA@ DB 'glLinkProgram', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LDMLEABL@glAttachShader?$AA@
CONST	SEGMENT
??_C@_0P@LDMLEABL@glAttachShader?$AA@ DB 'glAttachShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGIEGONF@glCompileShader?$AA@
CONST	SEGMENT
??_C@_0BA@DGIEGONF@glCompileShader?$AA@ DB 'glCompileShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFHCPFMO@glShaderSource?$AA@
CONST	SEGMENT
??_C@_0P@DFHCPFMO@glShaderSource?$AA@ DB 'glShaderSource', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HGHBNC@glCreateShader?$AA@
CONST	SEGMENT
??_C@_0P@HGHBNC@glCreateShader?$AA@ DB 'glCreateShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FLKLHNKP@glCreateProgram?$AA@
CONST	SEGMENT
??_C@_0BA@FLKLHNKP@glCreateProgram?$AA@ DB 'glCreateProgram', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NABONMNG@edit?$AA@
CONST	SEGMENT
??_C@_04NABONMNG@edit?$AA@ DB 'edit', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogsp
; File d:\old_j\sicker shit fuer die revision 2016\8k\src\main_rel.cpp
;	COMDAT ?entrypoint@@YGXXZ
_TEXT	SEGMENT
_imageTextures$ = -44					; size = 12
_p$1$ = -32						; size = 4
_p2$1$ = -28						; size = 4
_hDC$1$ = -24						; size = 4
_hWND$1$ = -20						; size = 4
tv730 = -16						; size = 4
tv743 = -12						; size = 4
tv741 = -12						; size = 4
tv735 = -12						; size = 4
tv728 = -12						; size = 4
_fbo$ = -8						; size = 4
tv742 = -4						; size = 4
?entrypoint@@YGXXZ PROC					; entrypoint, COMDAT

; 99   : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi

; 100  : 	//#define SWITCH_AFTER (338688 * 2)
; 101  : 	//#define SWITCH_AFTER_HALF 338688
; 102  : 	int SWITCH_AFTER = 338688 * 2;
; 103  : 	int SWITCH_AFTER_HALF = SWITCH_AFTER / 2;
; 104  : #ifdef FULLSCREEN
; 105  :     // full screen
; 106  :     if( ChangeDisplaySettings(&screenSettings,CDS_FULLSCREEN)!=DISP_CHANGE_SUCCESSFUL) return; ShowCursor( 0 );
; 107  : 
; 108  :     // create windows
; 109  : 	HWND hWND = CreateWindow("edit", 0, WS_POPUP|WS_VISIBLE, 0, -100,1280,720,0,0,0,0);
; 110  :     HDC hDC = GetDC( hWND );
; 111  : #else
; 112  : 	HWND hWND = CreateWindow("edit", 0,  WS_CAPTION|WS_VISIBLE, 0, 0,1280,720,0,0,0,0);

	xor	eax, eax
	mov	ecx, 1280				; 00000500H
	push	eax
	push	eax
	push	eax
	push	eax
	push	720					; 000002d0H
	push	ecx
	push	eax
	push	eax
	push	281018368				; 10c00000H
	push	eax
	push	OFFSET ??_C@_04NABONMNG@edit?$AA@
	push	eax
	mov	DWORD PTR tv730[ebp], ecx
	call	DWORD PTR __imp__CreateWindowExA@48

; 113  :     HDC hDC = GetDC( hWND );

	push	eax
	mov	DWORD PTR _hWND$1$[ebp], eax
	call	DWORD PTR __imp__GetDC@4
	mov	ebx, eax

; 114  : #endif
; 115  :     // init opengl
; 116  :     SetPixelFormat(hDC, ChoosePixelFormat(hDC, &pfd), &pfd);

	mov	eax, OFFSET ?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B
	push	eax
	push	eax
	push	ebx
	mov	DWORD PTR _hDC$1$[ebp], ebx
	call	DWORD PTR __imp__ChoosePixelFormat@8
	push	eax
	push	ebx
	call	DWORD PTR __imp__SetPixelFormat@12

; 117  :     wglMakeCurrent(hDC, wglCreateContext(hDC));

	push	ebx
	call	DWORD PTR __imp__wglCreateContext@4
	push	eax
	push	ebx
	call	DWORD PTR __imp__wglMakeCurrent@8

; 118  : 
; 119  :     // create shader
; 120  :     const int p = ((PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram"))();

	mov	ebx, DWORD PTR __imp__wglGetProcAddress@4
	push	OFFSET ??_C@_0BA@FLKLHNKP@glCreateProgram?$AA@
	call	ebx
	call	eax

; 121  :     const int s = ((PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader"))(GL_FRAGMENT_SHADER);

	push	35632					; 00008b30H
	mov	edi, eax
	push	OFFSET ??_C@_0P@HGHBNC@glCreateShader?$AA@
	mov	DWORD PTR _p$1$[ebp], edi
	call	ebx
	call	eax

; 122  :     ((PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource"))(s, 1, &shader_frag, 0);

	push	0
	push	OFFSET ?shader_frag@@3PBDB		; shader_frag
	push	1
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0P@DFHCPFMO@glShaderSource?$AA@
	call	ebx
	call	eax

; 123  :     ((PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader"))(s);

	push	esi
	push	OFFSET ??_C@_0BA@DGIEGONF@glCompileShader?$AA@
	call	ebx
	call	eax

; 124  :     ((PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader"))(p,s);

	push	esi
	push	edi
	push	OFFSET ??_C@_0P@LDMLEABL@glAttachShader?$AA@
	call	ebx
	call	eax

; 125  :     ((PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram"))(p);

	push	edi
	push	OFFSET ??_C@_0O@PIOEEBPO@glLinkProgram?$AA@
	call	ebx
	call	eax

; 126  : 
; 127  : 	const int p2 = ((PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram"))();

	push	OFFSET ??_C@_0BA@FLKLHNKP@glCreateProgram?$AA@
	call	ebx
	call	eax

; 128  : 	const int s2 = ((PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader"))(GL_FRAGMENT_SHADER);

	push	35632					; 00008b30H
	mov	edi, eax
	push	OFFSET ??_C@_0P@HGHBNC@glCreateShader?$AA@
	mov	DWORD PTR _p2$1$[ebp], edi
	call	ebx
	call	eax

; 129  : 	((PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource"))(s2, 1, &shader_2_frag, 0);

	push	0
	push	OFFSET ?shader_2_frag@@3PBDB		; shader_2_frag
	mov	esi, eax
	push	1
	push	esi
	push	OFFSET ??_C@_0P@DFHCPFMO@glShaderSource?$AA@
	call	ebx
	call	eax

; 130  : 	((PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader"))(s2);

	push	esi
	push	OFFSET ??_C@_0BA@DGIEGONF@glCompileShader?$AA@
	call	ebx
	call	eax

; 131  : 	((PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader"))(p2, s2);

	push	esi
	push	edi
	push	OFFSET ??_C@_0P@LDMLEABL@glAttachShader?$AA@
	call	ebx
	call	eax

; 132  : 	((PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram"))(p2);

	push	edi
	push	OFFSET ??_C@_0O@PIOEEBPO@glLinkProgram?$AA@
	call	ebx
	call	eax
	movss	xmm1, DWORD PTR __real@3f800000
	xor	esi, esi
	xor	edi, edi
	mov	DWORD PTR tv742[ebp], 921600		; 000e1000H
	xor	ebx, ebx
	mov	ecx, OFFSET ?textureDataInitial@@3PAMA+4
$LL4@entrypoint:

; 133  : 
; 134  : 	// Create texture data
; 135  : 	for (int i = 0; i < XRES * YRES; i++) {
; 136  : 		unsigned int jx = ((i * 42144323) % 34423233) % (XRES * YRES);

	mov	eax, ebx
	mov	DWORD PTR tv728[ebp], 34423233		; 020d41c1H
	cdq
	add	ebx, 42144323				; 02831243H
	idiv	DWORD PTR tv728[ebp]

; 137  : 		unsigned int jy = ((i * 12233123) % 85653223) % (XRES * YRES);

	mov	DWORD PTR tv735[ebp], 85653223		; 051af6e7H
	mov	eax, edx
	cdq
	idiv	DWORD PTR tv742[ebp]

; 138  : 		unsigned int js = ((i * 53764312) % 23412352) % (XRES * YRES);
; 139  : 		textureDataInitial[i * 4] = ((float)(jx % 1280) / 640.0) - 1.0;

	mov	eax, edx
	xor	edx, edx
	div	DWORD PTR tv730[ebp]
	mov	eax, edi
	add	edi, 12233123				; 00baa9a3H
	movd	xmm0, edx
	cvtdq2pd xmm0, xmm0
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	cdq
	idiv	DWORD PTR tv735[ebp]
	cvtpd2ps xmm0, xmm0
	mov	eax, edx
	mov	DWORD PTR tv741[ebp], 23412352		; 01653e80H
	cdq
	idiv	DWORD PTR tv742[ebp]
	mulss	xmm0, DWORD PTR __real@3acccccd
	mov	eax, esi
	add	esi, 53764312				; 033460d8H
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx-4], xmm0
	movd	xmm0, edx

; 140  : 		textureDataInitial[i * 4 + 1] = (((float)jy / 720.0) / 360.0) - 1.0;

	cvtdq2pd xmm0, xmm0
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	cdq
	idiv	DWORD PTR tv741[ebp]

; 141  : 		// textureDataInitial[i * 4 + 2] = (float)((js % (80*400)) / (4.0 * 400.0) + 5.0);
; 142  : 		textureDataInitial[i * 4 + 2] = (float)((js % (80 * 400)) / (80.0 * 400.0));

	mov	DWORD PTR tv743[ebp], 32000		; 00007d00H
	mov	eax, edx
	cdq
	idiv	DWORD PTR tv742[ebp]
	cvtpd2ps xmm0, xmm0
	mov	eax, edx
	xor	edx, edx
	div	DWORD PTR tv743[ebp]
	mulss	xmm0, DWORD PTR __real@3ab60b61
	mulss	xmm0, DWORD PTR __real@3b360b61
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, edx
	cvtdq2pd xmm0, xmm0
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm0, QWORD PTR __real@3f00624dd2f1a9fc
	cvtpd2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	add	ecx, 16					; 00000010H
	cmp	ecx, OFFSET ?textureDataInitial@@3PAMA+14745604
	jl	$LL4@entrypoint

; 143  : 	}
; 144  : 
; 145  : 	// Allow pointing
; 146  : 	glEnable(GL_POINT_SPRITE);

	mov	ebx, DWORD PTR __imp__glEnable@4
	push	34913					; 00008861H
	call	ebx

; 147  : 	glEnable(GL_BLEND);

	push	3042					; 00000be2H
	call	ebx

; 148  : 	glBlendFunc(GL_ONE, GL_ONE);

	push	1
	push	1
	call	DWORD PTR __imp__glBlendFunc@8

; 149  : 
; 150  : 	// Create textures
; 151  : 	GLuint imageTextures[3];
; 152  : 	glGenTextures(3, imageTextures);

	lea	eax, DWORD PTR _imageTextures$[ebp]
	push	eax
	push	3
	call	DWORD PTR __imp__glGenTextures@8

; 153  : 
; 154  : 	((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE0);

	mov	ebx, DWORD PTR __imp__wglGetProcAddress@4
	push	33984					; 000084c0H
	push	OFFSET ??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@
	call	ebx
	call	eax

; 155  : 	glBindTexture(GL_TEXTURE_2D, imageTextures[0]);

	push	DWORD PTR _imageTextures$[ebp]
	mov	edi, 3553				; 00000de1H
	push	edi
	call	DWORD PTR __imp__glBindTexture@8

; 156  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	mov	esi, 9728				; 00002600H
	push	esi
	push	10240					; 00002800H
	push	edi
	mov	edi, DWORD PTR __imp__glTexParameteri@12
	call	edi

; 157  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

	push	esi
	push	10241					; 00002801H
	mov	esi, 3553				; 00000de1H
	push	esi
	call	edi

; 158  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, XRES, YRES, 0, GL_RGBA, GL_FLOAT, textureDataInitial);

	push	OFFSET ?textureDataInitial@@3PAMA	; textureDataInitial
	push	5126					; 00001406H
	push	6408					; 00001908H
	push	0
	push	720					; 000002d0H
	mov	eax, 1280				; 00000500H
	push	eax
	push	34836					; 00008814H
	push	0
	push	esi
	mov	esi, DWORD PTR __imp__glTexImage2D@36
	call	esi

; 159  : 
; 160  : 	((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE1);

	push	33985					; 000084c1H
	push	OFFSET ??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@
	call	ebx
	call	eax

; 161  : 	glBindTexture(GL_TEXTURE_2D, imageTextures[1]);

	push	DWORD PTR _imageTextures$[ebp+4]
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8

; 162  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	push	9729					; 00002601H
	push	10240					; 00002800H
	push	3553					; 00000de1H
	call	edi

; 163  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	push	9729					; 00002601H
	push	10241					; 00002801H
	push	3553					; 00000de1H
	call	edi

; 164  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, XRES, YRES, 0, GL_RGBA, GL_FLOAT, 0);

	xor	eax, eax
	mov	ecx, 1280				; 00000500H
	push	eax
	push	5126					; 00001406H
	push	6408					; 00001908H
	push	eax
	push	720					; 000002d0H
	push	ecx
	push	34836					; 00008814H
	push	eax
	push	3553					; 00000de1H
	call	esi

; 165  : 
; 166  : 	((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE2);

	push	33986					; 000084c2H
	push	OFFSET ??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@
	call	ebx
	call	eax

; 167  : 	glBindTexture(GL_TEXTURE_3D, imageTextures[2]);

	push	DWORD PTR _imageTextures$[ebp+8]
	mov	esi, DWORD PTR __imp__glBindTexture@8
	mov	edi, 32879				; 0000806fH
	push	edi
	call	esi

; 168  : 	((PFNGLTEXIMAGE3DPROC)wglGetProcAddress("glTexImage3D"))(GL_TEXTURE_3D, 0, GL_RGBA32F, 512, 512, 512, 0, GL_RGBA, GL_FLOAT, 0);

	xor	ecx, ecx
	push	ecx
	push	5126					; 00001406H
	push	6408					; 00001908H
	push	ecx
	mov	eax, 512				; 00000200H
	push	eax
	push	eax
	push	eax
	push	34836					; 00008814H
	push	ecx
	push	edi
	push	OFFSET ??_C@_0N@JAEIBBBF@glTexImage3D?$AA@
	call	ebx
	call	eax

; 169  : 
; 170  : 	/*((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE2);
; 171  : 	glBindTexture(GL_TEXTURE_2D, imageTextures[2]);
; 172  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
; 173  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);*/
; 174  : 
; 175  : 	// Set up window
; 176  : 	MoveWindow(hWND, 0, 0, 1280, 720, 0);

	xor	edi, edi
	mov	eax, 1280				; 00000500H
	push	edi
	push	720					; 000002d0H
	push	eax
	push	edi
	push	edi
	push	DWORD PTR _hWND$1$[ebp]
	call	DWORD PTR __imp__MoveWindow@24

; 177  : 
; 178  : 	// Sound
; 179  : 	CreateThread(0, 0, (LPTHREAD_START_ROUTINE)_4klang_render, lpSoundBuffer, 0, 0);

	push	edi
	push	edi
	push	OFFSET ?lpSoundBuffer@@3PAMA		; lpSoundBuffer
	push	OFFSET __4klang_render@4
	push	edi
	push	edi
	call	DWORD PTR __imp__CreateThread@24

; 180  : 	waveOutOpen(&hWaveOut, WAVE_MAPPER, &WaveFMT, NULL, 0, CALLBACK_NULL );

	push	edi
	push	edi
	push	edi
	push	OFFSET ?WaveFMT@@3UtWAVEFORMATEX@@A	; WaveFMT
	push	-1
	push	OFFSET ?hWaveOut@@3PAUHWAVEOUT__@@A	; hWaveOut
	call	DWORD PTR __imp__waveOutOpen@24

; 181  : 	waveOutPrepareHeader(hWaveOut, &WaveHDR, sizeof(WaveHDR));

	push	32					; 00000020H
	mov	edi, OFFSET ?WaveHDR@@3Uwavehdr_tag@@A	; WaveHDR
	push	edi
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A	; hWaveOut
	call	DWORD PTR __imp__waveOutPrepareHeader@12

; 182  : 	waveOutWrite(hWaveOut, &WaveHDR, sizeof(WaveHDR));	

	push	32					; 00000020H
	push	edi
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A	; hWaveOut
	call	DWORD PTR __imp__waveOutWrite@12

; 183  : 	
; 184  : 	// put in textures
; 185  : 	((PFNGLBINDIMAGETEXTUREEXTPROC)wglGetProcAddress("glBindImageTextureEXT"))(0, imageTextures[0], 0, 1, 0, GL_READ_WRITE, GL_RGBA32F);

	push	34836					; 00008814H
	push	35002					; 000088baH
	xor	eax, eax
	mov	edi, OFFSET ??_C@_0BG@CKIKMCEP@glBindImageTextureEXT?$AA@
	push	eax
	push	1
	push	eax
	push	DWORD PTR _imageTextures$[ebp]
	push	eax
	push	edi
	call	ebx
	call	eax

; 186  : 	((PFNGLBINDIMAGETEXTUREEXTPROC)wglGetProcAddress("glBindImageTextureEXT"))(1, imageTextures[2], 0, 1, 0, GL_READ_WRITE, GL_RGBA32F);

	push	34836					; 00008814H
	push	35002					; 000088baH
	push	0
	push	1
	push	0
	push	DWORD PTR _imageTextures$[ebp+8]
	push	1
	push	edi
	call	ebx
	call	eax

; 187  : 
; 188  : 	// unfortunately, FBOs
; 189  : 	GLuint fbo, depth_rb;
; 190  : 	glBindTexture(GL_TEXTURE_2D, 0);

	push	0
	mov	edi, 3553				; 00000de1H
	push	edi
	call	esi

; 191  : 	((PFNGLGENFRAMEBUFFERSPROC)wglGetProcAddress("glGenFramebuffers"))(1, &fbo);

	lea	eax, DWORD PTR _fbo$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_0BC@FAPEBGID@glGenFramebuffers?$AA@
	call	ebx
	call	eax

; 192  : 	((PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer"))(GL_FRAMEBUFFER, fbo);

	push	DWORD PTR _fbo$[ebp]
	mov	esi, 36160				; 00008d40H
	push	esi
	push	OFFSET ??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@
	call	ebx
	call	eax

; 193  : 	((PFNGLFRAMEBUFFERTEXTURE2DPROC)wglGetProcAddress("glFramebufferTexture2D"))(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, imageTextures[1], 0);

	push	0
	push	DWORD PTR _imageTextures$[ebp+4]
	push	edi
	push	36064					; 00008ce0H
	push	esi
	push	OFFSET ??_C@_0BH@JCIFGDEF@glFramebufferTexture2D?$AA@
	call	ebx
	call	eax
	mov	edi, DWORD PTR _hDC$1$[ebp]
	jmp	SHORT $LN7@entrypoint
$LL35@entrypoint:
	mov	esi, 36160				; 00008d40H
$LN7@entrypoint:

; 194  : 	/*((PFNGLGENRENDERBUFFERSEXTPROC)wglGetProcAddress("glGenRenderbuffersEXT"))(1, &depth_rb);
; 195  : 	((PFNGLBINDRENDERBUFFEREXTPROC)wglGetProcAddress("glBindRenderbufferEXT"))(GL_RENDERBUFFER_EXT, depth_rb);
; 196  : 	((PFNGLRENDERBUFFERSTORAGEEXTPROC)wglGetProcAddress("glRenderbufferStorageEXT"))(GL_RENDERBUFFER_EXT, GL_DEPTH_COMPONENT24, XRES, YRES);
; 197  : 	((PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)wglGetProcAddress("glFramebufferRenderbufferEXT"))(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, depth_rb);*/
; 198  : 
; 199  :     // run
; 200  : 	unsigned int samplast = 0;
; 201  : 	unsigned int samplerun = 0;
; 202  :     do
; 203  :     {
; 204  : 		((PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer"))(GL_FRAMEBUFFER, fbo);

	push	DWORD PTR _fbo$[ebp]
	push	esi
	push	OFFSET ??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@
	call	ebx
	call	eax

; 205  : 		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

	push	16640					; 00004100H
	call	DWORD PTR __imp__glClear@4

; 206  : 		glEnable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4

; 207  : 
; 208  : 		// get sample position for timing
; 209  : 		waveOutGetPosition(hWaveOut, &MMTime, sizeof(MMTIME));

	push	12					; 0000000cH
	push	OFFSET ?MMTime@@3Ummtime_tag@@A		; MMTime
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A	; hWaveOut
	call	DWORD PTR __imp__waveOutGetPosition@12

; 210  : 
; 211  : 		((PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram"))(p2);

	push	DWORD PTR _p2$1$[ebp]
	push	OFFSET ??_C@_0N@ICBDHBI@glUseProgram?$AA@
	call	ebx
	call	eax
	mov	esi, OFFSET ?textureData@@3PAMA+8
$LL10@entrypoint:

; 215  : 			ssSize = ssDist > 0.02 ? ssSize * (YRES/2.0) : 0;

	movss	xmm0, DWORD PTR [esi]
	cvtps2pd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3f947ae147ae147b
	jbe	SHORT $LN16@entrypoint

; 212  : 		for (int i = 0; i < 1280 * 30; i++) {
; 213  : 			float ssDist = (float)textureData[i * 4 + 2];
; 214  : 			float ssSize = (SPHERERAD / ssDist);

	movss	xmm0, DWORD PTR __real@3b03126f
	divss	xmm0, DWORD PTR [esi]

; 215  : 			ssSize = ssDist > 0.02 ? ssSize * (YRES/2.0) : 0;

	cvtps2pd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	jmp	SHORT $LN17@entrypoint
$LN16@entrypoint:
	xorps	xmm0, xmm0
$LN17@entrypoint:
	cvtpd2ps xmm0, xmm0

; 216  : 			glPointSize(ssSize);

	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glPointSize@4

; 217  : 			glBegin(GL_POINTS);

	push	0
	call	DWORD PTR __imp__glBegin@4

; 218  : 			glColor4f(textureData[i * 4 + 3], 0.0, 0.0, 0.0);

	movss	xmm0, DWORD PTR [esi+4]
	sub	esp, 16					; 00000010H
	and	DWORD PTR [esp+12], 0
	and	DWORD PTR [esp+8], 0
	and	DWORD PTR [esp+4], 0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor4f@16

; 219  : 			glVertex3f(textureData[i * 4], textureData[i * 4 + 1], textureData[i * 4 + 2]);

	movss	xmm0, DWORD PTR [esi]
	sub	esp, 12					; 0000000cH
	movss	DWORD PTR [esp+8], xmm0
	movss	xmm0, DWORD PTR [esi-4]
	movss	DWORD PTR [esp+4], xmm0
	movss	xmm0, DWORD PTR [esi-8]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex3f@12

; 220  : 			glEnd();

	call	DWORD PTR __imp__glEnd@0
	add	esi, 16					; 00000010H
	cmp	esi, OFFSET ?textureData@@3PAMA+614408
	jl	$LL10@entrypoint

; 221  : 		}
; 222  : 
; 223  : 		glDisable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR __imp__glDisable@4

; 224  : 
; 225  : 		((PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer"))(GL_FRAMEBUFFER, 0);

	push	0
	push	36160					; 00008d40H
	push	OFFSET ??_C@_0BC@CJMIBNO@glBindFramebuffer?$AA@
	call	ebx
	call	eax

; 226  : 		glEnable(GL_DEPTH_TEST);

	push	2929					; 00000b71H
	call	DWORD PTR __imp__glEnable@4

; 227  : 		glDepthFunc(GL_LESS);

	push	513					; 00000201H
	call	DWORD PTR __imp__glDepthFunc@4

; 228  : 		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	push	16640					; 00004100H
	call	DWORD PTR __imp__glClear@4
	mov	esi, OFFSET ?textureData@@3PAMA+8
$LL13@entrypoint:

; 233  : 			ssSize = ssDist > 0.02 ? ssSize * (YRES / 2.0) : 0;

	movss	xmm0, DWORD PTR [esi]
	cvtps2pd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@3f947ae147ae147b
	jbe	SHORT $LN18@entrypoint

; 229  : 
; 230  : 		for (int i = 0; i < 1280 * 30; i++) {
; 231  : 			float ssDist = (float)textureData[i * 4 + 2];
; 232  : 			float ssSize = (SPHERERAD / ssDist);

	movss	xmm0, DWORD PTR __real@3b03126f
	divss	xmm0, DWORD PTR [esi]

; 233  : 			ssSize = ssDist > 0.02 ? ssSize * (YRES / 2.0) : 0;

	cvtps2pd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	jmp	SHORT $LN19@entrypoint
$LN18@entrypoint:
	xorps	xmm0, xmm0
$LN19@entrypoint:
	cvtpd2ps xmm0, xmm0

; 234  : 			glPointSize(ssSize);

	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glPointSize@4

; 235  : 			glBegin(GL_POINTS);

	push	0
	call	DWORD PTR __imp__glBegin@4

; 236  : 			glColor4f(textureData[i * 4 + 3], 0.0, 0.0, 0.0);

	movss	xmm0, DWORD PTR [esi+4]
	sub	esp, 16					; 00000010H
	and	DWORD PTR [esp+12], 0
	and	DWORD PTR [esp+8], 0
	and	DWORD PTR [esp+4], 0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor4f@16

; 237  : 			glVertex3f(textureData[i * 4], textureData[i * 4 + 1], textureData[i * 4 + 2]);

	movss	xmm0, DWORD PTR [esi]
	sub	esp, 12					; 0000000cH
	movss	DWORD PTR [esp+8], xmm0
	movss	xmm0, DWORD PTR [esi-4]
	movss	DWORD PTR [esp+4], xmm0
	movss	xmm0, DWORD PTR [esi-8]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex3f@12

; 238  : 			glEnd();

	call	DWORD PTR __imp__glEnd@0
	add	esi, 16					; 00000010H
	cmp	esi, OFFSET ?textureData@@3PAMA+614408
	jl	$LL13@entrypoint

; 239  : 		}
; 240  : 
; 241  : 		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

	push	16640					; 00004100H
	call	DWORD PTR __imp__glClear@4

; 242  : 		glDisable(GL_DEPTH_TEST);

	push	2929					; 00000b71H
	call	DWORD PTR __imp__glDisable@4

; 243  : 		((PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram"))(p);

	push	DWORD PTR _p$1$[ebp]
	push	OFFSET ??_C@_0N@ICBDHBI@glUseProgram?$AA@
	call	ebx
	call	eax

; 244  : 
; 245  : 		/*glReadPixels(0, 0, XRES, YRES, GL_RGBA, GL_FLOAT, screenData);
; 246  : 		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, XRES, YRES, 0, GL_RGBA, GL_FLOAT, screenData);*/
; 247  : 
; 248  : 		((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE1);

	push	33985					; 000084c1H
	mov	esi, OFFSET ??_C@_0BA@KOBBIKOF@glActiveTexture?$AA@
	push	esi
	call	ebx
	call	eax

; 249  : 		glBindTexture(GL_TEXTURE_2D, imageTextures[1]);

	push	DWORD PTR _imageTextures$[ebp+4]
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8

; 250  : 
; 251  : 		((PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"))(GL_TEXTURE0);

	push	33984					; 000084c0H
	push	esi
	call	ebx
	call	eax

; 252  : 		glGetTexImage(GL_TEXTURE_2D, 0, GL_RGBA, GL_FLOAT, textureData);

	push	OFFSET ?textureData@@3PAMA		; textureData
	push	5126					; 00001406H
	push	6408					; 00001908H
	xor	esi, esi
	push	esi
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glGetTexImage@20

; 253  : 		glColor4ui(MMTime.u.sample, 0, 0, 0);

	push	esi
	push	esi
	push	esi
	push	DWORD PTR ?MMTime@@3Ummtime_tag@@A+4
	call	DWORD PTR __imp__glColor4ui@16

; 254  : 		glRects(-1, -1, 1, 1);

	push	1
	push	1
	push	-1
	push	-1
	call	DWORD PTR __imp__glRects@16

; 255  : 
; 256  :         SwapBuffers(hDC);

	push	edi
	call	DWORD PTR __imp__SwapBuffers@4

; 257  : 
; 258  : 		PeekMessageA(0, 0, 0, 0, PM_REMOVE); 

	push	1
	push	esi
	push	esi
	push	esi
	push	esi
	call	DWORD PTR __imp__PeekMessageA@20

; 259  : 	} while (MMTime.u.sample < SWITCH_AFTER_HALF * 9 && !GetAsyncKeyState(VK_ESCAPE));

	cmp	DWORD PTR ?MMTime@@3Ummtime_tag@@A+4, 3048192 ; 002e8300H
	jae	SHORT $LN14@entrypoint
	push	27					; 0000001bH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	je	$LL35@entrypoint
$LN14@entrypoint:

; 260  : 
; 261  :     ExitProcess( 0 );

	push	esi
	call	DWORD PTR __imp__ExitProcess@4
$LN37@entrypoint:
$LN36@entrypoint:
	int	3
?entrypoint@@YGXXZ ENDP					; entrypoint
_TEXT	ENDS
END
